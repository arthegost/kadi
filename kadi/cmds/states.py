"""
This module provides the core functions for creating, manipulating and updating
the Chandra commanded states database.
"""

import collections
import itertools

import numpy as np
import six

from astropy.table import Table, Column

from . import cmds as commands

from Chandra.Time import DateTime
import Chandra.Maneuver
from Quaternion import Quat

REV_PARS_DICT = commands.rev_pars_dict

# Registry of Transition classes with state transition name as key.  A state transition
# may be generated by several different transition classes, hence the dict value is a list
TRANSITIONS = collections.defaultdict(list)

# Set of all Transition classes
TRANSITION_CLASSES = set()

# Ordered list of all state keys
STATE_KEYS = []

# State keys that are required to handle maneuvers.  If any of these keys are requested
# then all of these must be included in state processing.
MANVR_STATE_KEYS = ['q1', 'q2', 'q3', 'q4', 'targ_q1', 'targ_q2', 'targ_q3', 'targ_q4',
                    'auto_npnt', 'pcad_mode']


def decode_power(mnem):
    """
    Decode number of chips and feps from a ACIS power command
    Return a dictionary with the number of chips and their identifiers

    Example::

     >>> decode_power("WSPOW08F3E")
     {'ccd_count': 5,
      'ccds': 'I0 I1 I2 I3 S3 ',
      'fep_count': 5,
      'feps': '1 2 3 4 5 '}

    :param mnem: power command string

    """
    # the hex for the commanding is after the WSPOW
    powstr = mnem[5:]
    if (len(powstr) != 5):
        raise ValueError("%s in unexpected format" % mnem)

    # convert the hex to decimal and "&" it with 63 (binary 111111)
    fepkey = int(powstr, 16) & 63
    fep_info = {'fep_count': 0,
                'ccd_count': 0,
                'feps': '',
                'ccds': ''}
    # count the true binary bits
    for bit in xrange(0, 6):
        if (fepkey & (1 << bit)):
            fep_info['fep_count'] = fep_info['fep_count'] + 1
            fep_info['feps'] = fep_info['feps'] + str(bit) + ' '

    # convert the hex to decimal and right shift by 8 places
    vidkey = int(powstr, 16) >> 8

    # count the true bits
    for bit in xrange(0, 10):
        if (vidkey & (1 << bit)):
            fep_info['ccd_count'] = fep_info['ccd_count'] + 1
            # position indicates I or S chip
            if (bit < 4):
                fep_info['ccds'] = fep_info['ccds'] + 'I' + str(bit) + ' '
            else:
                fep_info['ccds'] = fep_info['ccds'] + 'S' + str(bit - 4) + ' '

    return fep_info


def _make_add_trans(transitions, date, exclude):
    def add_trans(date=date, **kwargs):
        # if no key in kwargs is in the exclude set then update transition
        if not (exclude and set(exclude).intersection(kwargs)):
            transitions.setdefault(date, {}).update(kwargs)
    return add_trans


class TransitionMeta(type):
    """
    Metaclass that adds the class to the TRANSITIONS registry.
    """
    def __new__(mcls, name, bases, members):
        cls = super(TransitionMeta, mcls).__new__(mcls, name, bases, members)

        # Register transition classes that have a `transition_name`.
        if 'transition_name' in members:
            if 'state_keys' not in members:
                cls.state_keys = [cls.transition_name]

            for state_key in cls.state_keys:
                if state_key not in STATE_KEYS:
                    STATE_KEYS.append(state_key)
                TRANSITIONS[state_key].append(cls)

            TRANSITION_CLASSES.add(cls)

        return cls


@six.add_metaclass(TransitionMeta)
class BaseTransition(object):
    @classmethod
    def get_state_changing_commands(cls, cmds):
        """
        Get commands that match the required attributes for state changing commands.
        """
        ok = np.ones(len(cmds), dtype=bool)
        for attr, val in cls.command_attributes.items():
            ok = ok & (np.asarray(cmds[attr]) == val)
        return cmds[ok]


class SingleFixedTransition(BaseTransition):
    @classmethod
    def set_transitions(cls, transitions, cmds):
        """
        Set transitions for a Table of commands ``cmds``.  This is the simplest
        case where there is a single fixed attribute that gets set to a fixed
        value, e.g. pcad_mode='NMAN' for NMM.
        """
        state_cmds = cls.get_state_changing_commands(cmds)
        val = cls.transition_val
        attr = cls.transition_name

        for cmd in state_cmds:
            transitions[cmd['date']][attr] = val


class NMM_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AONMMODE'}
    transition_name = 'pcad_mode'
    transition_val = 'NMAN'
    state_keys = MANVR_STATE_KEYS


class NPM_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AONPMODE'}
    transition_name = 'pcad_mode'
    transition_val = 'NPNT'
    state_keys = MANVR_STATE_KEYS


# class ACISTransition(BaseTransition):
#     command_attributes = {'type': 'ACISPKT'}
#     transition_name = 'acis'

#     @classmethod
#     def set_transitions(cls, transitions, cmds):
#         state_cmds = cls.get_state_changing_commands(cmds)
#         for cmd in state_cmds:
#             tlmsid = cmd['tlmsid']
#             date = cmd['date']

# class NPM_AutoEnableTransition(BaseTransition):
#     command_attributes = {'type': 'COMMAND_SW',
#                           'tlmsid': 'AONM2NPE'}
#     transition_name = 'pcad_mode'

#     @classmethod
#     def set_transitions(cls, transitions, cmds):
#         state_cmds = cls.get_state_changing_commands(cmds)
#         for cmd in state_cmds:
#             date = cmd['date']
#             transitions[date].update({'auto_npnt': True})


class HETG_INSR_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': '4OHETGIN'}
    transition_name = 'hetg'
    transition_val = 'INSR'


class HETG_RETR_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': '4OHETGRE'}
    transition_name = 'hetg'
    transition_val = 'RETR'


class LETG_INSR_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': '4OLETGIN'}
    transition_name = 'letg'
    transition_val = 'INSR'


class LETG_RETR_Transition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': '4OLETGRE'}
    transition_name = 'letg'
    transition_val = 'RETR'


class DitherEnableTransition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AOENDITH'}
    transition_name = 'dither'
    transition_val = 'ENAB'


class DitherDisableTransition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AODSDITH'}
    transition_name = 'dither'
    transition_val = 'DISA'


class ParamTransition(BaseTransition):
    @classmethod
    def set_transitions(cls, transitions, cmds):
        """
        Set transitions for a Table of commands ``cmds``.  This is the simplest
        case where there is an attribute that gets set to a specified
        value in the command, e.g. MP_OBSID or SIMTRANS
        """
        state_cmds = cls.get_state_changing_commands(cmds)
        param_key = cls.transition_param_key
        name = cls.transition_name

        for cmd in state_cmds:
            val = dict(REV_PARS_DICT[cmd['idx']])[param_key]
            transitions[cmd['date']][name] = val


class ObsidTransition(ParamTransition):
    command_attributes = {'type': 'MP_OBSID'}
    transition_name = 'obsid'
    transition_param_key = 'id'


class SimTscTransition(ParamTransition):
    command_attributes = {'type': 'SIMTRANS'}
    transition_param_key = 'pos'
    transition_name = 'simpos'


class SimFocusTransition(ParamTransition):
    command_attributes = {'type': 'SIMFOCUS'}
    transition_param_key = 'pos'
    transition_name = 'simfa_pos'


class AutoNPMEnableTransition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AONM2NPE'}
    transition_name = 'auto_npnt'
    transition_val = 'ENAB'
    state_keys = MANVR_STATE_KEYS


class AutoNPMDisableTransition(SingleFixedTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AONM2NPD'}
    transition_name = 'auto_npnt'
    transition_val = 'DISA'
    state_keys = MANVR_STATE_KEYS


class TargQuatTransition(BaseTransition):
    command_attributes = {'type': 'MP_TARGQUAT'}
    transition_name = 'targ_quat'
    state_keys = MANVR_STATE_KEYS

    @classmethod
    def set_transitions(cls, transitions, cmds):
        state_cmds = cls.get_state_changing_commands(cmds)

        for cmd in state_cmds:
            transition = transitions[cmd['date']]
            for qc in ('q1', 'q2', 'q3', 'q4'):
                transition['targ_' + qc] = cmd[qc]


class ManeuverTransition(BaseTransition):
    command_attributes = {'type': 'COMMAND_SW',
                          'tlmsid': 'AOMANUVR'}
    transition_name = 'maneuver'
    state_keys = MANVR_STATE_KEYS

    @classmethod
    def set_transitions(cls, transitions, cmds):
        state_cmds = cls.get_state_changing_commands(cmds)

        for cmd in state_cmds:
            transitions[cmd['date']]['maneuver'] = {'func': cls.add_manvr_transitions,
                                                    'cmd': cmd}

    @staticmethod
    def add_manvr_transitions(transitions, state, cmd):
        qcs = ('q1', 'q2', 'q3', 'q4')

        targ_att = [state['targ_' + qc] for qc in qcs]
        if state['q1'] is None:
            for qc in qcs:
                state[qc] = state['targ_' + qc]
        curr_att = [state[qc] for qc in qcs]

        # add pitch/attitude commands
        print(curr_att)
        print(targ_att)
        print(cmd['date'])
        atts = Chandra.Maneuver.attitudes(curr_att, targ_att,
                                          tstart=DateTime(cmd['date']).secs)

        pitches = np.hstack([(atts[:-1].pitch + atts[1:].pitch) / 2,
                             atts[-1].pitch])
        for att, pitch in zip(atts, pitches):
            # q_att = Quat([att[x] for x in qcs])
            date = DateTime(att.time).date
            print(date, att['q1'])
            for qc in qcs:
                transitions[date][qc] = att[qc]
            # TODO: ra, dec, roll

        # If auto-transition to NPM after manvr is enabled (this is
        # normally the case) then back to NPNT at end of maneuver
        if state['auto_npnt']:
            transitions[date]['pcad_mode'] = 'NPNT'

        # Now that the actual maneuver transitions have been added, remove the
        # 'maneuver' transition so the next pass will ignore it.
        print(transitions[cmd['date']]['maneuver'])
        del transitions[cmd['date']]['maneuver']

        for qc in qcs:
            state[qc] = state['targ_' + qc]


class ACISTransition(BaseTransition):
    command_attributes = {'type': 'ACISPKT'}
    transition_name = 'acis'
    state_keys = ['clocking', 'power_cmd', 'vid_board', 'fep_count', 'si_mode', 'ccd_count']

    @classmethod
    def set_transitions(cls, transitions, cmds):
        state_cmds = cls.get_state_changing_commands(cmds)
        for cmd in state_cmds:
            tlmsid = cmd['tlmsid']
            date = cmd['date']

            # TODO: fix bug in ACIS commanding: https://github.com/sot/cmd_states/pull/31/files

            if tlmsid.startswith('WSPOW'):
                pwr = decode_power(tlmsid)
                transitions[date].update(fep_count=pwr['fep_count'],
                                         ccd_count=pwr['ccd_count'],
                                         vid_board=1, clocking=0,
                                         power_cmd=tlmsid)

            elif tlmsid in ('XCZ0000005', 'XTZ0000005'):
                transitions[date].update(clocking=1, power_cmd=tlmsid)

            elif tlmsid == 'WSVIDALLDN':
                transitions[date].update(vid_board=0, power_cmd=tlmsid)

            elif tlmsid == 'AA00000000':
                transitions[date].update(clocking=0, power_cmd=tlmsid)

            elif tlmsid == 'WSFEPALLUP':
                transitions[date].update(fep_count=6, power_cmd=tlmsid)

            elif tlmsid.startswith('WC'):
                transitions[date].update(si_mode='CC_' + tlmsid[2:7])

            elif tlmsid.startswith('WT'):
                transitions[date].update(si_mode='TE_' + tlmsid[2:7])


def get_transition_classes(state_keys=None):
    """
    Get all BaseTransition subclasses in this module corresponding to
    state keys ``state_keys``.
    """
    if isinstance(state_keys, six.string_types):
        state_keys = [state_keys]

    if state_keys is None:
        # itertools.chain => concat list of lists
        trans_classes = set(itertools.chain.from_iterable(TRANSITIONS.values()))
    else:
        trans_classes = set(itertools.chain.from_iterable(
                classes for state_key, classes in TRANSITIONS.items()
                if state_key in state_keys))
    return trans_classes


def get_transitions(cmds, state_keys=None):
    transitions = collections.defaultdict(dict)

    for transition_class in get_transition_classes(state_keys):
        transition_class.set_transitions(transitions, cmds)

    return transitions


def get_states_for_cmds(cmds, state_keys=None):
    # Define complete list of column names for output table corresponding to
    # each state key.  Maintain original order and uniqueness of keys.
    if state_keys is None:
        state_keys = STATE_KEYS
        orig_state_keys = state_keys
    else:
        # Go through each transition class which impacts desired state keys and accumulate
        # all the state keys that the classes touch.  For instance if user requests
        # state_keys=['q1'] then we actually need to process all the MANVR_STATE_KEYS
        # and then at the end reduce down to the requested keys.
        orig_state_keys = state_keys
        state_keys = []
        for state_key in orig_state_keys:
            for cls in TRANSITION_CLASSES:
                if state_key in cls.state_keys:
                    state_keys.extend(cls.state_keys)
        state_keys = unique(state_keys)

    # Get transitions, which is a dict (keyed by date) of dict (state key
    # and new state value at that date).  This goes through each active
    # transition class and accumulates transitions.
    transitions = get_transitions(cmds, state_keys)

    # Iterate through transitions.  Some transitions may be function callbacks
    # that generate new transitions based on the current state.  The 'maneuver'
    # transition is the canonical example.  If there are any function callbacks,
    # these will update the `transitions` dict and delete themselves, in which
    # case another iteration through the transitions is required.
    while True:
        transition_dates = sorted(transitions.keys())

        # List of dict to hold state values
        states = [{key: None for key in state_keys}]
        datestarts = [None]

        contained_funcs = False
        print('RUNNING transitions')
        for date in transition_dates:
            transition = transitions[date]

            state = states[-1].copy()
            for key, value in transition.items():
                if isinstance(value, dict):
                    func = value.pop('func')
                    func(state=state, transitions=transitions, **value)
                    contained_funcs = True
                else:
                    state[key] = value
                    print('{} state[{}] = {}'.format(date, key, value))

            if state == states[-1]:
                continue

            datestarts.append(date)
            states.append(state)

        if not contained_funcs:
            break

    states = Table(rows=states, names=state_keys)
    states.add_column(Column(datestarts, name='datestart'), 0)

    return states, transitions


def unique(seq):
    """Return unique elements of seq in order"""
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]
